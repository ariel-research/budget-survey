version: '3.8'

services:
  db:
    image: mysql:8.0
    container_name: budget_survey_db_prod
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      TEST_MYSQL_DATABASE: ${TEST_MYSQL_DATABASE:-test_survey}
    ports:
      - "127.0.0.1:${MYSQL_PORT:-3306}:3306"  # Bind to localhost only
    volumes:
      - db_data:/var/lib/mysql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
      - ./database/z1-apply-schema-to-test-db.sh:/docker-entrypoint-initdb.d/z1-apply-schema-to-test-db.sh
      - ./logs/mysql:/var/log/mysql
    networks:
      - budget_survey_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      start_period: 40s
      interval: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  app:
    build: 
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: budget_survey_app_prod
    depends_on:
      db:
        condition: service_healthy
    environment:
      - FLASK_ENV=production
      - MYSQL_HOST=db
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - TEST_MYSQL_DATABASE=${TEST_MYSQL_DATABASE:-test_survey}
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY}
      - SURVEY_BASE_URL=${SURVEY_BASE_URL}
    ports:
      - "127.0.0.1:${APP_PORT:-5001}:5001"  # Bind to localhost only
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
    networks:
      - budget_survey_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '1.0'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: budget_survey_nginx_prod
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl  # For SSL certificates
      - nginx_logs:/var/log/nginx
    networks:
      - budget_survey_network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Log aggregation service (optional)
  # logspout:
  #   image: gliderlabs/logspout:latest
  #   container_name: budget_survey_logspout
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   environment:
  #     - ROUTE_URIS=tcp://your-log-aggregation-service:514
  #   depends_on:
  #     - app
  #     - db
  #   restart: unless-stopped

networks:
  budget_survey_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  db_data:
    driver: local
  app_logs:
    driver: local
  app_data:
    driver: local
  nginx_logs:
    driver: local 